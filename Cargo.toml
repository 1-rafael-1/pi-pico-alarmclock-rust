[package]
name = "pi-pico-alarmclock"
version = "0.5.0"
edition = "2024"
authors = ["rafael.koch@gmx.net"]
description = "Raspberry Pi Pico W alarm clock with WiFi, time sync, OLED display, and WS2812 LED support"
readme = "README.md"
homepage = "https://github.com/1-rafael-1/pi-pico-alarmclock-rust"
repository = "https://github.com/1-rafael-1/pi-pico-alarmclock-rust"
license = "MIT"
keywords = ["embedded", "pico", "alarm-clock", "rp2040"]
categories = ["embedded", "no-std"]
resolver = "2"

[dependencies]
embassy-embedded-hal = { git = "https://github.com/embassy-rs/embassy", rev = "2a79c55d4d38e95f90a8efcf93a3e28f4d6ad35f", features = [
    "defmt",
] }
embassy-sync = { git = "https://github.com/embassy-rs/embassy", rev = "2a79c55d4d38e95f90a8efcf93a3e28f4d6ad35f", features = [
    "defmt",
] }
embassy-executor = { git = "https://github.com/embassy-rs/embassy", rev = "2a79c55d4d38e95f90a8efcf93a3e28f4d6ad35f", features = [
    "arch-cortex-m",
    "executor-thread",
    "executor-interrupt",
    "defmt",
] }
embassy-time = { git = "https://github.com/embassy-rs/embassy", rev = "2a79c55d4d38e95f90a8efcf93a3e28f4d6ad35f", features = [
    "defmt",
    "defmt-timestamp-uptime",
] }
embassy-rp = { git = "https://github.com/embassy-rs/embassy", rev = "2a79c55d4d38e95f90a8efcf93a3e28f4d6ad35f", features = [
    "defmt",
    "unstable-pac",
    "time-driver",
    "critical-section-impl",
    "rp2040",
] }
embassy-net = { git = "https://github.com/embassy-rs/embassy", rev = "2a79c55d4d38e95f90a8efcf93a3e28f4d6ad35f", features = [
    "defmt",
    "tcp",
    "udp",
    "raw",
    "dhcpv4",
    "medium-ethernet",
    "dns",
    "dhcpv4-hostname",
] }
embassy-futures = { git = "https://github.com/embassy-rs/embassy", rev = "2a79c55d4d38e95f90a8efcf93a3e28f4d6ad35f" }
cyw43 = { git = "https://github.com/embassy-rs/embassy", rev = "2a79c55d4d38e95f90a8efcf93a3e28f4d6ad35f", features = [
    "defmt",
    "firmware-logs",
] }
cyw43-pio = { git = "https://github.com/embassy-rs/embassy", rev = "2a79c55d4d38e95f90a8efcf93a3e28f4d6ad35f", features = [
    "defmt",
] }

sequential-storage = "3.0.0"
defmt = "1.0.1"
defmt-rtt = "1.1.0"

cortex-m-rt = "0.7.0"

panic-probe = { version = "1.0.0", features = ["print-defmt"] }
embedded-graphics = "0.8.1"

smart-leds = "0.4.0"
ssd1306-async = { git = "https://github.com/kalkyl/ssd1306-async", rev = "21b611be2f0dc85cf7ff6dca01f53a71dbe1c622" }
ws2812-async = "0.3.0"
heapless = "0.9.1"
serde = { version = "1.0.203", default-features = false, features = ["derive"] }
serde-json-core = "0.6.0"

static_cell = "2"
portable-atomic = { version = "1.5", features = ["critical-section"] }
pio-proc = "0.2"

rand = { version = "0.8.5", default-features = false }
reqwless = { version = "0.13.0", features = ["defmt"] }
tinybmp = "0.6.0"
dfplayer-async = { version = "0.5.0", features = ["defmt"] }

[build-dependencies]
serde = "1.0"
serde_json = "1.0"

# cargo build/run
[profile.dev]
lto = 'thin'
codegen-units = 16
debug = 2
debug-assertions = true
incremental = true
opt-level = 's'
overflow-checks = true

# cargo build/run --release
[profile.release]
codegen-units = 1
debug = 2                # is not flashed to the device
debug-assertions = false
incremental = true
lto = 'fat'
opt-level = 's'
overflow-checks = false

# Configure defmt to only show warnings and errors in release builds
# This prevents the device from hanging due to RTT buffer overflow
# when running standalone without a debugger
# Use environment variable DEFMT_LOG to control log levels:
# Build with: DEFMT_LOG=warn cargo build --release
# This will compile out all info! and debug! statements
[profile.release.package.defmt]
opt-level = "z"

# cargo test
[profile.test]
codegen-units = 1
debug = 2
debug-assertions = true
incremental = false
opt-level = 's'
overflow-checks = true

# cargo test --release
[profile.bench]
codegen-units = 1
debug = 2
debug-assertions = false
incremental = false
lto = 'fat'
opt-level = 's'

[lints.clippy]
# Enable all main clippy lints (with lower priority so individual lints can override)
all = { level = "warn", priority = 1 }
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }

# Deny specific lints (treat as errors) - these have priority 0 and will override the groups above
unwrap_used = "warn"
expect_used = "warn"

# Warn on specific lints
panic = "warn"
missing_docs_in_private_items = "warn"
cargo_common_metadata = "warn"

# Allow specific lints
future_not_send = "allow" # embassy tasks are not Send
multiple_crate_versions = "allow" # not worth the effort, we get a minimal binary size increase that does not matter here

[patch.crates-io]
